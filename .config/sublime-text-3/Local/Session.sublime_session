{
	"folder_history":
	[
		"/home/steve-hartzog/Documents/Projects/Code Samples/TypeScriptSamples"
	],
	"last_version": 3083,
	"last_window_id": 1,
	"log_indexing": false,
	"settings":
	{
	},
	"windows":
	[
		{
			"auto_complete":
			{
				"selected_items":
				[
				]
			},
			"buffers":
			[
				{
					"contents": "/* ---------------------------------------------------------------------------------------\nTodos.ts\nMicrosoft grants you the right to use these script files under the Apache 2.0 license. \nMicrosoft reserves all other rights to the files not expressly granted by Microsoft, \nwhether by implication, estoppel or otherwise. The copyright notices and MIT licenses \nbelow are for informational purposes only.\n\nPortions Copyright © Microsoft Corporation\nApache 2.0 License\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use this \nfile except in compliance with the License. You may obtain a copy of the License at\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under \nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF \nANY KIND, either express or implied.\n\nSee the License for the specific language governing permissions and limitations \nunder the License.\n------------------------------------------------------------------------------------------\nProvided for Informational Purposes Only\nMIT License\nPermission is hereby granted, free of charge, to any person obtaining a copy of this \nsoftware and associated documentation files (the \"Software\"), to deal in the Software \nwithout restriction, including without limitation the rights to use, copy, modify, merge, \npublish, distribute, sublicense, and/or sell copies of the Software, and to permit \npersons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies \nor substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, \nINCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR \nPURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE \nFOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR \nOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER \nDEALINGS IN THE SOFTWARE.\n--------------------------------------------------------------------------------------- */\n// Todos.js\n// https://github.com/documentcloud/backbone/blob/master/examples/todos/todos.js\n\n// An example Backbone application contributed by\n// [Jérôme Gravel-Niquet](http://jgn.me/). This demo uses a simple\n// [LocalStorage adapter](backbone-localstorage.js)\n// to persist Backbone models within your browser.\n\ndeclare module Backbone {\n    export class Model {\n        constructor (attr? , opts? );\n        get(name: string): any;\n        set(name: string, val: any): void;\n        set(obj: any): void;\n        save(attr? , opts? ): void;\n        destroy(): void;\n        bind(ev: string, f: Function, ctx?: any): void;\n        toJSON(): any;\n    }\n    export class Collection<T> {\n        constructor (models? , opts? );\n        bind(ev: string, f: Function, ctx?: any): void;\n        length: number;\n        create(attrs, opts? ): any;\n        each(f: (elem: T) => void ): void;\n        fetch(opts?: any): void;\n        last(): T;\n        last(n: number): T[];\n        filter(f: (elem: T) => boolean): T[];\n        without(...values: T[]): T[];\n    }\n    export class View {\n        constructor (options? );\n        $(selector: string): JQuery;\n        el: HTMLElement;\n        $el: JQuery;\n        model: Model;\n        remove(): void;\n        delegateEvents: any;\n        make(tagName: string, attrs? , opts? ): View;\n        setElement(element: HTMLElement, delegate?: boolean): void;\n        setElement(element: JQuery, delegate?: boolean): void;\n        tagName: string;\n        events: any;\n\n        static extend: any;\n    }\n}\ninterface JQuery {\n    fadeIn(): JQuery;\n    fadeOut(): JQuery;\n    focus(): JQuery;\n    html(): string;\n    html(val: string): JQuery;\n    show(): JQuery;\n    addClass(className: string): JQuery;\n    removeClass(className: string): JQuery;\n    append(el: HTMLElement): JQuery;\n    val(): string;\n    val(value: string): JQuery;\n    attr(attrName: string): string;\n}\ndeclare var $: {\n    (el: HTMLElement): JQuery;\n    (selector: string): JQuery;\n    (readyCallback: () => void ): JQuery;\n};\ndeclare var _: {\n    each<T, U>(arr: T[], f: (elem: T) => U): U[];\n    delay(f: Function, wait: number, ...arguments: any[]): number;\n    template(template: string): (model: any) => string;\n    bindAll(object: any, ...methodNames: string[]): void;\n};\ndeclare var Store: any;\n\n\n// Todo Model\n// ----------\n\n// Our basic **Todo** model has `content`, `order`, and `done` attributes.\nexport default class Todo extends Backbone.Model {\n\n    // Default attributes for the todo.\n    defaults() {\n        return {\n            content: \"empty todo...\",\n            done: false\n        }\n    }\n\n        // Ensure that each todo created has `content`.\n    initialize() {\n        console.log('test me2!');\n        if (!this.get(\"content\")) {\n            this.set({ \"content\": this.defaults().content });\n        }\n    }\n\n    // Toggle the `done` state of this todo item.\n    toggle() {\n        this.save({ done: !this.get(\"done\") });\n    }\n\n    // Remove this Todo from *localStorage* and delete its view.\n    clear() {\n        this.destroy();\n    }\n\n}\n\n// Todo Collection\n// ---------------\n\n// The collection of todos is backed by *localStorage* instead of a remote\n// server.\nclass TodoList extends Backbone.Collection<Todo> {\n\n    // Reference to this collection's model.\n    model = Todo;\n\n    // Save all of the todo items under the `\"todos\"` namespace.\n    localStorage = new Store(\"todos-backbone\");\n\n    // Filter down the list of all todo items that are finished.\n    done() {\n        return this.filter(todo => todo.get('done'));\n    }\n\n    // Filter down the list to only todo items that are still not finished.\n    remaining() {\n        return this.without.apply(this, this.done());\n    }\n\n    // We keep the Todos in sequential order, despite being saved by unordered\n    // GUID in the database. This generates the next order number for new items.\n    nextOrder() {\n        if (!this.length) return 1;\n        return this.last().get('order') + 1;\n    }\n\n    // Todos are sorted by their original insertion order.\n    comparator(todo: Todo) {\n        return todo.get('order');\n    }\n\n}\n\n// Create our global collection of **Todos**.\nvar Todos = new TodoList();\n\n// Todo Item View\n// --------------\nfunction log(target: Function,\n    key: string, value: any): T {\n    return {\n        value: function(...args: any[]) {\n            var a = args.map(a.map(\n                a => JSON.stringify(a)).join();\n            var result = ;\n            var r = ;\n            console.log(`Call: ${key}(${a}) => ${r}`);\n            return result;\n        }\n    };\n}\n\n// The DOM element for a todo item...\n@myClassDecorator\nclass identity(num: number): number {\n    @myPropertyDecorator\n    var num: number = 123;\n\n    @log\n    public f(@myParamDecorator x: number) {\n    }\n}\nclass TodoView extends Backbone.View {\n\n    // The TodoView listens for changes to its model, re-rendering. Since there's\n    // a one-to-one correspondence between a **Todo** and a **TodoView** in this\n    // app, we set a direct reference on the model for convenience.\n    template: (data: any) => string;\n\n    // A TodoView model must be a Todo, redeclare with specific type\n    model: Todo;\n    input: JQuery;\n\n    constructor (options? ) {\n        //... is a list tag.\n        this.tagName = \"li\";\n\n        // The DOM events specific to an item.\n        this.events = {\n            \"click .check\": \"toggleDone\",\n            \"dblclick label.todo-content\": \"edit\",\n            \"click span.todo-destroy\": \"clear\",\n            \"keypress .todo-input\": \"updateOnEnter\",\n            \"blur .todo-input\": \"close\"\n        };\n\n        super(options);\n\n        // Cache the template function for a single item.\n        this.template = _.template($('#item-template').html());\n\n        _.bindAll(this, 'render', 'close', 'remove');\n        this.model.bind('change', this.render);\n        this.model.bind('destroy', this.remove);\n    }\n\n    // Re-render the contents of the todo item.\n    render() {\n        this.$el.html(this.template(this.model.toJSON()));\n        this.input = this.$('.todo-input');\n        return this;\n    }\n\n    // Toggle the `\"done\"` state of the model.\n    toggleDone() {\n        this.model.toggle();\n    }\n\n    // Switch this view into `\"editing\"` mode, displaying the input field.\n    edit() {\n        this.$el.addClass(\"editing\");\n        this.input.focus();\n    }\n\n    // Close the `\"editing\"` mode, saving changes to the todo.\n    close() {\n        this.model.save({ content: this.input.val() });\n        this.$el.removeClass(\"editing\");\n    }\n\n    // If you hit `enter`, we're through editing the item.\n    updateOnEnter(e) {\n        if (e.keyCode == 13) close();\n    }\n\n    // Remove the item, destroy the model.\n    clear() {\n        this.model.clear();\n    }\n\n}\n\n// The Application\n// ---------------\n\n// Our overall **AppView** is the top-level piece of UI.\nclass AppView extends Backbone.View {\n\n    // Delegated events for creating new items, and clearing completed ones.\n    events = {\n        \"keypress #new-todo\": \"createOnEnter\",\n        \"keyup #new-todo\": \"showTooltip\",\n        \"click .todo-clear a\": \"clearCompleted\",\n        \"click .mark-all-done\": \"toggleAllComplete\"\n    };\n\n    input: JQuery;\n    allCheckbox: HTMLInputElement;\n    statsTemplate: (params: any) => string;\n\n    constructor () {\n        super();\n        // Instead of generating a new element, bind to the existing skeleton of\n        // the App already present in the HTML.\n        this.setElement($(\"#todoapp\"), true);\n\n        // At initialization we bind to the relevant events on the `Todos`\n        // collection, when items are added or changed. Kick things off by\n        // loading any preexisting todos that might be saved in *localStorage*.\n        _.bindAll(this, 'addOne', 'addAll', 'render', 'toggleAllComplete');\n\n        this.input = this.$(\"#new-todo\");\n        this.allCheckbox = this.$(\".mark-all-done\")[0];\n        this.statsTemplate = _.template($('#stats-template').html());\n\n        Todos.bind('add', this.addOne);\n        Todos.bind('reset', this.addAll);\n        Todos.bind('all', this.render);\n\n        Todos.fetch();\n    }\n\n    // Re-rendering the App just means refreshing the statistics -- the rest\n    // of the app doesn't change.\n    render() {\n        var done = Todos.done().length;\n        var remaining = Todos.remaining().length;\n\n        this.$('#todo-stats').html(this.statsTemplate({\n            total: Todos.length,\n            done: done,\n            remaining: remaining\n        }));\n\n        this.allCheckbox.checked = !remaining;\n    }\n\n    // Add a single todo item to the list by creating a view for it, and\n    // appending its element to the `<ul>`.\n    addOne(todo) {\n        var view = new TodoView({ model: todo });\n        this.$(\"#todo-list\").append(view.render().el);\n    }\n\n    // Add all items in the **Todos** collection at once.\n    addAll() {\n        Todos.each(this.addOne);\n    }\n\n    // Generate the attributes for a new Todo item.\n    newAttributes() {\n        return {\n            content: this.input.val(),\n            order: Todos.nextOrder(),\n            done: false\n        };\n    }\n\n    // If you hit return in the main input field, create new **Todo** model,\n    // persisting it to *localStorage*.\n    createOnEnter(e) {\n        if (e.keyCode != 13) return;\n        Todos.create(this.newAttributes());\n        this.input.val('');\n    }\n\n    // Clear all done todo items, destroying their models.\n    clearCompleted() {\n        _.each(Todos.done(), todo => todo.clear());\n        return false;\n    }\n\n    tooltipTimeout: number = null;\n    // Lazily show the tooltip that tells you to press `enter` to save\n    // a new todo item, after one second.\n    showTooltip(e) {\n        var tooltip = $(\".ui-tooltip-top\");\n        var val = this.input.val();\n        tooltip.fadeOut();\n        if (this.tooltipTimeout) clearTimeout(this.tooltipTimeout);\n        if (val == '' || val == this.input.attr('placeholder')) return;\n        this.tooltipTimeout = _.delay(() => tooltip.show().fadeIn(), 1000);\n    }\n\n    toggleAllComplete() {\n        var done = this.allCheckbox.checked;\n        Todos.each(todo => todo.save({ 'done': done }));\n    }\n\n}\n\n// Load the application once the DOM is ready, using `jQuery.ready`:\n$(() => {\n    // Finally, we kick things off by creating the **App**.\n    new AppView();\n});",
					"file": "/home/steve-hartzog/Documents/Projects/Code Samples/TypeScriptSamples/todomvc/js/todos.ts",
					"file_size": 12109,
					"file_write_time": 130977164652631244,
					"settings":
					{
						"buffer_size": 12630,
						"line_ending": "Unix"
					}
				},
				{
					"contents": "/* ---------------------------------------------------------------------------------------\nTodos.ts\nMicrosoft grants you the right to use these script files under the Apache 2.0 license.\nMicrosoft reserves all other rights to the files not expressly granted by Microsoft,\nwhether by implication, estoppel or otherwise. The copyright notices and MIT licenses\nbelow are for informational purposes only.\n\nPortions Copyright © Microsoft Corporation\nApache 2.0 License\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use this\nfile except in compliance with the License. You may obtain a copy of the License at\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\nANY KIND, either express or implied.\n\nSee the License for the specific language governing permissions and limitations\nunder the License.\n------------------------------------------------------------------------------------------\nProvided for Informational Purposes Only\nMIT License\nPermission is hereby granted, free of charge, to any person obtaining a copy of this\nsoftware and associated documentation files (the \"Software\"), to deal in the Software\nwithout restriction, including without limitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of the Software, and to permit\npersons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies\nor substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\nINCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR\nPURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE\nFOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\nOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n--------------------------------------------------------------------------------------- */\n// Todos.js\n// https://github.com/documentcloud/backbone/blob/master/examples/todos/todos.js\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n// Todo Model\n// ----------\n// Our basic **Todo** model has `content`, `order`, and `done` attributes.\nvar Todo = (function (_super) {\n    __extends(Todo, _super);\n    function Todo() {\n        _super.apply(this, arguments);\n    }\n    // Default attributes for the todo.\n    Todo.prototype.defaults = function () {\n        return {\n            content: \"empty todo...\",\n            done: false\n        };\n    };\n    // Ensure that each todo created has `content`.\n    Todo.prototype.initialize = function () {\n        console.log('test me2!');\n        if (!this.get(\"content\")) {\n            this.set({ \"content\": this.defaults().content });\n        }\n    };\n    // Toggle the `done` state of this todo item.\n    Todo.prototype.toggle = function () {\n        this.save({ done: !this.get(\"done\") });\n    };\n    // Remove this Todo from *localStorage* and delete its view.\n    Todo.prototype.clear = function () {\n        this.destroy();\n    };\n    return Todo;\n})(Backbone.Model);\nexports[\"default\"] = Todo;\n// Todo Collection\n// ---------------\n// The collection of todos is backed by *localStorage* instead of a remote\n// server.\nvar TodoList = (function (_super) {\n    __extends(TodoList, _super);\n    function TodoList() {\n        _super.apply(this, arguments);\n        // Reference to this collection's model.\n        this.model = Todo;\n        // Save all of the todo items under the `\"todos\"` namespace.\n        this.localStorage = new Store(\"todos-backbone\");\n    }\n    // Filter down the list of all todo items that are finished.\n    TodoList.prototype.done = function () {\n        if (todo instanceOf Todo) {\n            console.log('yep');\n        }\n        return this.filter(function (todo) { return todo.get('done'); });\n    };\n    // Filter down the list to only todo items that are still not finished.\n    TodoList.prototype.remaining = function () {\n        return this.without.apply(this, this.done());\n    };\n    // We keep the Todos in sequential order, despite being saved by unordered\n    // GUID in the database. This generates the next order number for new items.\n    TodoList.prototype.nextOrder = function () {\n        if (!this.length)\n            return 1;\n        return this.last().get('order') + 1;\n    };\n    // Todos are sorted by their original insertion order.\n    TodoList.prototype.comparator = function (todo) {\n        return todo.get('order');\n    };\n    return TodoList;\n})(Backbone.Collection);\n// Create our global collection of **Todos**.\nvar Todos = new TodoList();\n// Todo Item View\n// --------------\n// The DOM element for a todo item...\nvar TodoView = (function (_super) {\n    __extends(TodoView, _super);\n    function TodoView(options) {\n        //... is a list tag.\n        this.tagName = \"li\";\n        // The DOM events specific to an item.\n        this.events = {\n            \"click .check\": \"toggleDone\",\n            \"dblclick label.todo-content\": \"edit\",\n            \"click span.todo-destroy\": \"clear\",\n            \"keypress .todo-input\": \"updateOnEnter\",\n            \"blur .todo-input\": \"close\"\n        };\n        _super.call(this, options);\n        // Cache the template function for a single item.\n        this.template = _.template($('#item-template').html());\n        _.bindAll(this, 'render', 'close', 'remove');\n        this.model.bind('change', this.render);\n        this.model.bind('destroy', this.remove);\n    }\n    // Re-render the contents of the todo item.\n    TodoView.prototype.render = function () {\n        this.$el.html(this.template(this.model.toJSON()));\n        this.input = this.$('.todo-input');\n        return this;\n    };\n    // Toggle the `\"done\"` state of the model.\n    TodoView.prototype.toggleDone = function () {\n        this.model.toggle();\n    };\n    // Switch this view into `\"editing\"` mode, displaying the input field.\n    TodoView.prototype.edit = function () {\n        this.$el.addClass(\"editing\");\n        this.input.focus();\n    };\n    // Close the `\"editing\"` mode, saving changes to the todo.\n    TodoView.prototype.close = function () {\n        this.model.save({ content: this.input.val() });\n        this.$el.removeClass(\"editing\");\n    };\n    // If you hit `enter`, we're through editing the item.\n    TodoView.prototype.updateOnEnter = function (e) {\n        if (e.keyCode == 13)\n            close();\n    };\n    // Remove the item, destroy the model.\n    TodoView.prototype.clear = function () {\n        this.model.clear();\n    };\n    return TodoView;\n})(Backbone.View);\n// The Application\n// ---------------\n// Our overall **AppView** is the top-level piece of UI.\nvar AppView = (function (_super) {\n    __extends(AppView, _super);\n    function AppView() {\n        _super.call(this);\n        // Delegated events for creating new items, and clearing completed ones.\n        this.events = {\n            \"keypress #new-todo\": \"createOnEnter\",\n            \"keyup #new-todo\": \"showTooltip\",\n            \"click .todo-clear a\": \"clearCompleted\",\n            \"click .mark-all-done\": \"toggleAllComplete\"\n        };\n        this.tooltipTimeout = null;\n        // Instead of generating a new element, bind to the existing skeleton of\n        // the App already present in the HTML.\n        this.setElement($(\"#todoapp\"), true);\n        // At initialization we bind to the relevant events on the `Todos`\n        // collection, when items are added or changed. Kick things off by\n        // loading any preexisting todos that might be saved in *localStorage*.\n        _.bindAll(this, 'addOne', 'addAll', 'render', 'toggleAllComplete');\n        this.input = this.$(\"#new-todo\");\n        this.allCheckbox = this.$(\".mark-all-done\")[0];\n        this.statsTemplate = _.template($('#stats-template').html());\n        Todos.bind('add', this.addOne);\n        Todos.bind('reset', this.addAll);\n        Todos.bind('all', this.render);\n        Todos.fetch();\n    }\n    // Re-rendering the App just means refreshing the statistics -- the rest\n    // of the app doesn't change.\n    AppView.prototype.render = function () {\n        var done = Todos.done().length;\n        var remaining = Todos.remaining().length;\n        this.$('#todo-stats').html(this.statsTemplate({\n            total: Todos.length,\n            done: done,\n            remaining: remaining\n        }));\n        this.allCheckbox.checked = !remaining;\n    };\n    // Add a single todo item to the list by creating a view for it, and\n    // appending its element to the `<ul>`.\n    AppView.prototype.addOne = function (todo) {\n        var view = new TodoView({ model: todo });\n        this.$(\"#todo-list\").append(view.render().el);\n    };\n    // Add all items in the **Todos** collection at once.\n    AppView.prototype.addAll = function () {\n        Todos.each(this.addOne);\n    };\n    // Generate the attributes for a new Todo item.\n    AppView.prototype.newAttributes = function () {\n        return {\n            content: this.input.val(),\n            order: Todos.nextOrder(),\n            done: false\n        };\n    };\n    // If you hit return in the main input field, create new **Todo** model,\n    // persisting it to *localStorage*.\n    AppView.prototype.createOnEnter = function (e) {\n        if (e.keyCode != 13)\n            return;\n        Todos.create(this.newAttributes());\n        this.input.val('');\n    };\n    // Clear all done todo items, destroying their models.\n    AppView.prototype.clearCompleted = function () {\n        _.each(Todos.done(), function (todo) { return todo.clear(); });\n        return false;\n    };\n    // Lazily show the tooltip that tells you to press `enter` to save\n    // a new todo item, after one second.\n    AppView.prototype.showTooltip = function (e) {\n        var tooltip = $(\".ui-tooltip-top\");\n        var val = this.input.val();\n        tooltip.fadeOut();\n        if (this.tooltipTimeout)\n            clearTimeout(this.tooltipTimeout);\n        if (val == '' || val == this.input.attr('placeholder'))\n            return;\n        this.tooltipTimeout = _.delay(function () { return tooltip.show().fadeIn(); }, 1000);\n    };\n    AppView.prototype.toggleAllComplete = function () {\n        var done = this.allCheckbox.checked;\n        Todos.each(function (todo) { return todo.save({ 'done': done }); });\n    };\n    return AppView;\n})(Backbone.View);\n// Load the application once the DOM is ready, using `jQuery.ready`:\n$(function () {\n    // Finally, we kick things off by creating the **App**.\n    new AppView();\n});\n",
					"file": "/home/steve-hartzog/Documents/Projects/Code Samples/TypeScriptSamples/todomvc/js/todos.js",
					"file_size": 10918,
					"file_write_time": 130977183643538117,
					"settings":
					{
						"buffer_size": 10995,
						"line_ending": "Unix"
					}
				}
			],
			"build_system": "",
			"build_system_choices":
			[
			],
			"build_varint": "",
			"command_palette":
			{
				"height": 355.0,
				"last_filter": "Package Control: Install",
				"selected_items":
				[
					[
						"Package Control: Install",
						"Package Control: Install Package"
					],
					[
						"Package Control: Instal",
						"Package Control: Install Package"
					],
					[
						"Package Control: Inst",
						"Package Control: Install Package"
					],
					[
						"Package Control: Insta",
						"Package Control: Install Package"
					],
					[
						"Package Control: ",
						"Package Control: Install Package"
					]
				],
				"width": 898.0
			},
			"console":
			{
				"height": 252.0,
				"history":
				[
					"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
				]
			},
			"distraction_free":
			{
				"menu_visible": true,
				"show_minimap": false,
				"show_open_files": false,
				"show_tabs": false,
				"side_bar_visible": false,
				"status_bar_visible": false
			},
			"expanded_folders":
			[
				"/home/steve-hartzog/Documents/Projects/Code Samples/TypeScriptSamples",
				"/home/steve-hartzog/Documents/Projects/Code Samples/TypeScriptSamples/angular2",
				"/home/steve-hartzog/Documents/Projects/Code Samples/TypeScriptSamples/todomvc",
				"/home/steve-hartzog/Documents/Projects/Code Samples/TypeScriptSamples/todomvc/js"
			],
			"file_history":
			[
				"/home/steve-hartzog/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
				"/home/steve-hartzog/.config/sublime-text-3/Packages/SublimeLinter/SublimeLinter.sublime-settings"
			],
			"find":
			{
				"height": 60.0
			},
			"find_in_files":
			{
				"height": 0.0,
				"where_history":
				[
				]
			},
			"find_state":
			{
				"case_sensitive": false,
				"find_history":
				[
				],
				"highlight": true,
				"in_selection": false,
				"preserve_case": false,
				"regex": false,
				"replace_history":
				[
				],
				"reverse": false,
				"show_context": true,
				"use_buffer2": true,
				"whole_word": false,
				"wrap": true
			},
			"folders":
			[
				{
					"path": "/home/steve-hartzog/Documents/Projects/Code Samples/TypeScriptSamples"
				}
			],
			"groups":
			[
				{
					"selected": 0,
					"sheets":
					[
						{
							"buffer": 0,
							"file": "/home/steve-hartzog/Documents/Projects/Code Samples/TypeScriptSamples/todomvc/js/todos.ts",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 12630,
								"regions":
								{
								},
								"selection":
								[
									[
										6942,
										6942
									]
								],
								"settings":
								{
									"syntax": "Packages/TypeScript/TypeScript.tmLanguage",
									"tab_size": 4,
									"translate_tabs_to_spaces": true,
									"typescript_plugin_format_options":
									{
										"convertTabsToSpaces": true,
										"indentSize": 4,
										"tabSize": 4
									},
									"use_tab_stops": false
								},
								"translation.x": 0.0,
								"translation.y": 5472.0,
								"zoom_level": 1.0
							},
							"stack_index": 0,
							"type": "text"
						}
					]
				},
				{
					"selected": 0,
					"sheets":
					[
						{
							"buffer": 1,
							"file": "/home/steve-hartzog/Documents/Projects/Code Samples/TypeScriptSamples/todomvc/js/todos.js",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 10995,
								"regions":
								{
								},
								"selection":
								[
									[
										4240,
										4240
									]
								],
								"settings":
								{
									"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
									"tab_size": 4,
									"translate_tabs_to_spaces": true,
									"typescript_plugin_format_options":
									{
										"convertTabsToSpaces": true,
										"indentSize": 4,
										"tabSize": 4
									}
								},
								"translation.x": 0.0,
								"translation.y": 4444.0,
								"zoom_level": 1.0
							},
							"stack_index": 1,
							"type": "text"
						}
					]
				}
			],
			"incremental_find":
			{
				"height": 40.0
			},
			"input":
			{
				"height": 0.0
			},
			"layout":
			{
				"cells":
				[
					[
						0,
						0,
						1,
						1
					],
					[
						1,
						0,
						2,
						1
					]
				],
				"cols":
				[
					0.0,
					0.419670128283,
					1.0
				],
				"rows":
				[
					0.0,
					1.0
				]
			},
			"menu_visible": true,
			"output.doc":
			{
				"height": 0.0
			},
			"output.find_results":
			{
				"height": 0.0
			},
			"pinned_build_system": "",
			"position": "0,1,0,0,0,526,60,2126,1260,3840,2160",
			"project": "",
			"replace":
			{
				"height": 76.0
			},
			"save_all_on_build": true,
			"select_file":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_project":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_symbol":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"selected_group": 0,
			"settings":
			{
			},
			"show_minimap": true,
			"show_open_files": false,
			"show_tabs": true,
			"side_bar_visible": true,
			"side_bar_width": 433.0,
			"status_bar_visible": true,
			"template_settings":
			{
			},
			"window_id": 1,
			"workspace_name": ""
		}
	],
	"workspaces":
	{
		"recent_workspaces":
		[
		]
	}
}
